using ConductorSharp.Engine.Interface;
using ConductorSharp.Engine.Model;
using ConductorSharp.Engine.Util;
using MediatR;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using SOC.Scanning.Services;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SOC.Scanning.Handler
{
    internal class ScanVulnerabilityRequest : IRequest<ScanVulnerabilityResponse>
    {
        [JsonProperty("ipAddress")]
        public string IpAddress { get; set; }
    }

    internal class ScanVulnerabilityResponse
    {

        [JsonProperty("result")]
        public string Result { get; set; }
    }

    [OriginalName("SCANNING_vulnerability")]
    internal class ScanVulnerabilityHandler : ITaskRequestHandler<ScanVulnerabilityRequest, ScanVulnerabilityResponse>
    {
        private readonly ILogger<ScanIpAddressHandler> _logger;
        private readonly ISshClientService _sshClientService;

        public ScanVulnerabilityHandler(ILogger<ScanIpAddressHandler> logger, ISshClientService sshClientService)
        {
            _logger = logger;
            _sshClientService = sshClientService;
        }

        public Task<ScanVulnerabilityResponse> Handle(ScanVulnerabilityRequest request, CancellationToken cancellationToken)
        {
            _sshClientService.Connect();

            var command = $"nmap --script vuln {request.IpAddress}";
            var result = _sshClientService.ExecuteCommand(command);

            return Task.FromResult(new ScanVulnerabilityResponse
            {
                Result = result.Result
            });

        }
    }
}
