using ConductorSharp.Engine.Interface;
using ConductorSharp.Engine.Util;
using MediatR;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using SOC.Ticketing.Generated;
using SOC.Ticketing.Services;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SOC.Ticketing.Handler
{
    public class TicketingRequestVulnerability : IRequest<TicketingResponse>
    {
        [JsonProperty("messageScanning")]
        public string MessageScanning { get; set; }

        [JsonProperty("messageIntelligence")]
        public JObject MessageIntelligence { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }
        [JsonProperty("severity")]
        public string Severity { get; set; }
    }

    public class TicketingResponse
    {
        [JsonProperty("caseId")]
        public string CaseId { get; set; }
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    [OriginalName("TICKETING_create_ticket_on_hive_vulnerability")]
    public class TicketingHandlerVulnerability : ITaskRequestHandler<TicketingRequestVulnerability, TicketingResponse>
    {
        private readonly ITicketingService _ticketingService;
        public TicketingHandlerVulnerability(ITicketingService ticketingService)
        {
            _ticketingService = ticketingService;
        }

        public async Task<TicketingResponse> Handle(TicketingRequestVulnerability request, CancellationToken cancellationToken)
        {
            InputCreateCaseSeverity inputSeverity;
            switch (request.Severity)
            {
                case "LOW":
                    inputSeverity = InputCreateCaseSeverity._1;
                    break;
                case "MEDIUM":
                    inputSeverity = InputCreateCaseSeverity._2;
                    break;
                case "HIGH":
                    inputSeverity = InputCreateCaseSeverity._3;
                    break;
                case "CRITICAL":
                    inputSeverity = InputCreateCaseSeverity._4;
                    break;
                default:
                    throw new ArgumentException("Invalid severity level provided.");
            }

            string title = request.Title;

            var inputCreateCase = new InputCreateCase()
            {
                Title = title,
                Description = $"Message from scanning: {request.MessageScanning} Message from intelligance : {request.MessageIntelligence}",
                Severity = inputSeverity
            };

            var inputCeateTask = new InputCreateTask()
            {
                Title = title
            };

            try
            {
                var createCaseResponse = await _ticketingService.CreateAsync<InputCreateCase, OutputCase>(inputCreateCase, "case");
                var caseId = createCaseResponse.Id;
                await _ticketingService.CreateTaskAsync(inputCeateTask, caseId);
                var message = $"A ticket with the name {title} and caseId = {caseId} is created.";
                return new TicketingResponse
                {
                    CaseId = caseId,
                    Message = message
                };
            }
            catch (Exception ex)
            {
                throw;
            }
        }
    }
}
